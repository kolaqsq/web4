security:
  enable_authenticator_manager: true

  password_hashers:
    # this internal class is used by Symfony to represent in-memory users
    # (the 'InMemoryUser' class was introduced in Symfony 5.3.
    # In previous versions it was called 'User')
    Symfony\Component\Security\Core\User\InMemoryUser: 'auto'

  providers:
    backend_users:
      memory:
        users:
          kolaq:
            # password: '$2y$13$7tDdHeW1lS4Eh2BFoXJum.NtziPZdnUnEjvF69/lK7QWUb7bQ99gi' # qwerty
            # api token a29sYXE6cXdlcnR5  kolaq:qwerty

            password: '$2y$13$f.R8itUP8lGfotyiqmWPue/WsziXOBR0yaR7xHqQgZ2r3qiaXYyTW' # qwerty1
            # api token a29sYXE6cXdlcnR5MQ==  kolaq:qwerty1

            roles: [ 'ROLE_ADMIN' ]

          user:
            # password: '$2y$13$7tDdHeW1lS4Eh2BFoXJum.NtziPZdnUnEjvF69/lK7QWUb7bQ99gi' # qwerty
            # api token dXNlcjpxd2VydHk=  user:qwerty

            password: '$2y$13$f.R8itUP8lGfotyiqmWPue/WsziXOBR0yaR7xHqQgZ2r3qiaXYyTW' # qwerty1
            # api token dXNlcjpxd2VydHkx  user:qwerty1

            roles: [ 'ROLE_USER' ]

          apiexec:
            # password: '$2y$13$7tDdHeW1lS4Eh2BFoXJum.NtziPZdnUnEjvF69/lK7QWUb7bQ99gi' # qwerty
            # api token YXBpZXhlYzpxd2VydHk=  apiexec:qwerty

            password: '$2y$13$f.R8itUP8lGfotyiqmWPue/WsziXOBR0yaR7xHqQgZ2r3qiaXYyTW' # qwerty1
            # api token YXBpZXhlYzpxd2VydHkx  apiexec:qwerty1

            roles: [ 'API_ADMIN' ]

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    basick:
      pattern: ^/sugoma/status/users
      lazy: true
      http_basic:
        provider: backend_users
        realm: Go away

    token_based:
      pattern: ^/sugoma/status/admin
      entry_point: App\Api\Security\ApiKeyAuthenticator
      custom_authenticators:
        - App\Api\Security\ApiKeyAuthenticator


      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    #    - { path: ^/, roles: PUBLIC_ACCESS }
    - { path: ^/sugoma, roles: ROLE_ADMIN }
  # - { path: ^/profile, roles: ROLE_USER }
